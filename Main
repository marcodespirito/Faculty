"""
Created on Fri Jan 27 11:08:02 2023
"""

from datetime import datetime, timedelta
import pandas as pd
from pybliometrics.scopus import AuthorRetrieval
import requests
import io

def Article_xlsx(df_art):
    df_art['DOI']=df_art['DOI'].fillna('')
    df_art['id'] = df_art.apply(lambda x: f"{x['Articoli']}_{x['DOI']}", axis=1)
    
    # Keep only the row with the maximum value in col3 for each group of duplicates
    result = df_art.loc[df_art.groupby(by='id')['Citations'].idxmax()]
    
    # Drop the 'id' column
    result = result.drop(columns=['id','Author'])
    result = result.reset_index(drop=True)
    
    # WARNING: modify the following path to save the file outside your working dir
    result.to_excel('Articoli.xlsx', sheet_name='Sheet1', index=False)
    return()

def Researchers_metrics(df_art,df):
    today = datetime.today().date()
    monthago=today-timedelta(days=30)
    yearago=today-timedelta(days=365)
    df_art['DOI']=df_art['DOI'].fillna('')
    df_art['id'] = df_art.apply(lambda x: f"{x['Articoli']}_{x['DOI']}", axis=1)
    
    # Keep only the row with the maximum value in col3 for each group of duplicates
    result = df_art.loc[df_art.groupby(by='id')['Citations'].idxmax()]
    
    # Drop the 'id' column
    result = result.drop(columns=['id','Author'])
    result = result.reset_index(drop=True)
    result['Article_ID']=range(len(result))
    result['Whole_Art_inf']=result['Articoli']+",_"+result['Journal']+",_DOI:"+result['DOI']
    
    
    df_p=df.copy()
    df_p = df_p.drop(columns=['Qualifica', 'Codice Nuovo Ssd',
            'Descrizione Nuovo Ssd', 'Email Istituzionale', 'Numero Profili Scopus'])
    
    df1=df_p.copy()
    df2=df_p.copy()
    df3=df_p.copy()
    df4=df_p.copy()
    
    
    df1 = df1.drop(columns=['Scopus_ID2','Scopus_ID3','Scopus_ID4'])
    df1 = df1.rename(columns={'Scopus_ID1': 'Scopus_ID'})
    df2 = df2.drop(columns=['Scopus_ID1','Scopus_ID3','Scopus_ID4'])
    df2 = df2.rename(columns={'Scopus_ID2': 'Scopus_ID'})
    df3 = df3.drop(columns=['Scopus_ID2','Scopus_ID1','Scopus_ID4'])
    df3 = df3.rename(columns={'Scopus_ID3': 'Scopus_ID'})
    df4 = df4.drop(columns=['Scopus_ID2','Scopus_ID1','Scopus_ID3'])
    df4 = df4.rename(columns={'Scopus_ID4': 'Scopus_ID'})
    
    df_new = pd.merge(df1, df2,  how='outer', left_on=['Scopus_ID','Cognome','Nome','Note'], right_on = ['Scopus_ID','Cognome','Nome','Note'], indicator=False)
    df_new = pd.merge(df_new, df3,  how='outer', left_on=['Scopus_ID','Cognome','Nome','Note'], right_on = ['Scopus_ID','Cognome','Nome','Note'], indicator=False)
    df_new = pd.merge(df_new, df4,  how='outer', left_on=['Scopus_ID','Cognome','Nome','Note'], right_on = ['Scopus_ID','Cognome','Nome','Note'], indicator=False)
    
    df_new.dropna(inplace=True)
    df_split = result.assign(Authors_ID=result['Authors_ID'].str.split(';'))
    new_df = df_split.explode('Authors_ID')
    new_df_filtered = new_df[new_df['Authors_ID'].isin(df_new['Scopus_ID'])]
    df_IDs=df.copy()
    df_IDs = df_IDs.drop(columns=['Cognome','Nome','Note'])
    df['Citations'] = pd.Series(dtype='int')
    df['h_index'] = pd.Series(dtype='int')
    df['Articles'] = pd.Series(dtype='int')
    df['Articles'] = pd.Series(dtype='int')
    df['#Articles_last_year'] = pd.Series(dtype='int')
    df['Articles_last_year'] = pd.Series(dtype='str')
    df['#Articles_last_month'] = pd.Series(dtype='int')
    df['Articles_last_month'] = pd.Series(dtype='str')



    for i in range (0,len(df_IDs)):
        row_to_copy = df_IDs.loc[i]
        # row_to_copy.dropna(inplace=True)
        mask = new_df_filtered['Authors_ID'].isin(row_to_copy)
        df_filtered = new_df_filtered[mask]
        df.loc[i,'Citations']=df_filtered.Citations.sum()
        df.loc[i,'Articles']=len(df_filtered)
        df.loc[i,'h_index']=sum(x >= i + 1 for i, x in enumerate(sorted(  list(df_filtered.Citations), reverse=True)))
        df.loc[i,'#Articles_last_year'] = len(df_filtered[(df_filtered['Date'].dt.date >= yearago) & (df_filtered['Date'].dt.date <= today)])
        df.loc[i,'#Articles_last_month'] = len(df_filtered[(df_filtered['Date'].dt.date >= monthago) & (df_filtered['Date'].dt.date <= today)])
        df.loc[i,'Articles_last_year'] =(df_filtered[(df_filtered['Date'].dt.date >= yearago) & (df_filtered['Date'].dt.date <= today)])['Whole_Art_inf'].str.cat(sep=';')
        df.loc[i,'Articles_last_month'] =(df_filtered[(df_filtered['Date'].dt.date >= monthago) & (df_filtered['Date'].dt.date <= today)])['Whole_Art_inf'].str.cat(sep=';')
    
    # WARNING: modify the following path to save the file outside your working dir
    df.to_excel('Metriche_ricercatori.xlsx', sheet_name='Sheet1', index=False)  

# WARNING: modify the following path to get the Ricercatori.xlsx file from your path
path="path+Ricercatori.xlsx"

# Read the CSV file from a URL into a DataFrame
df = pd.read_excel(path,dtype={"Scopus_ID1": str,"Scopus_ID2": str,"Scopus_ID3": str,"Scopus_ID4": str})

df_p=df.copy()
df_p = df_p.drop(columns=['Qualifica', 'Codice Nuovo Ssd',
       'Descrizione Nuovo Ssd'])

df1=df_p.copy()
df2=df_p.copy()
df3=df_p.copy()
df4=df_p.copy()

df1 = df1.drop(columns=['Scopus_ID2','Scopus_ID3','Scopus_ID4'])
df1 = df1.rename(columns={'Scopus_ID1': 'Scopus_ID'})
df2 = df2.drop(columns=['Scopus_ID1','Scopus_ID3','Scopus_ID4'])
df2 = df2.rename(columns={'Scopus_ID2': 'Scopus_ID'})
df3 = df3.drop(columns=['Scopus_ID2','Scopus_ID1','Scopus_ID4'])
df3 = df3.rename(columns={'Scopus_ID3': 'Scopus_ID'})
df4 = df4.drop(columns=['Scopus_ID2','Scopus_ID1','Scopus_ID3'])
df4 = df4.rename(columns={'Scopus_ID4': 'Scopus_ID'})

df_new = pd.merge(df1, df2,  how='outer', left_on=['Scopus_ID','Cognome','Nome'], right_on = ['Scopus_ID','Cognome','Nome'], indicator=False)
df_new = pd.merge(df_new, df3,  how='outer', left_on=['Scopus_ID','Cognome','Nome'], right_on = ['Scopus_ID','Cognome','Nome'], indicator=False)
df_new = pd.merge(df_new, df4,  how='outer', left_on=['Scopus_ID','Cognome','Nome'], right_on = ['Scopus_ID','Cognome','Nome'], indicator=False)

df_new.dropna(inplace=True)


conta=0
df_new['Scopus_ID']=df_new['Scopus_ID'].apply(int)
df_new['Scopus_ID']=df_new['Scopus_ID'].apply(str)

df_Articles = pd.DataFrame(columns = ['Date', 'Articoli', 'DOI','Journal','Authors','Authors_ID','Author','Citations'])

for ii in range(0,len(df_new)):
    num=df_new['Scopus_ID'][ii]
    print(num)
    conta=conta+1
    print(conta)
    Date=[]
    Articoli=[]
    DOIn=[]
    Journal=[]
    Authors=[]
    Authors_ID=[]
    Author=[]
    Citations=[]
    au = AuthorRetrieval(num)
    documents=au.get_documents()
    for i in range (0,len(documents)):
        Date.append(datetime.strptime(documents[i][16], '%Y-%m-%d'))
        Articoli.append(documents[i][4])
        DOIn.append(documents[i][1])
        Journal.append(documents[i][18])
        Authors.append(documents[i][13])
        Authors_ID.append(documents[i][14])
        Author.append(num)
        Citations.append(documents[i][29])
        
    data = {'Date': Date, 'Articoli': Articoli, 'DOI': DOIn, 'Journal':Journal,
            'Authors':Authors,'Authors_ID':Authors_ID,'Author':Author,'Citations':Citations}
   
    df_Author = pd.DataFrame(data)
    df_Articles=pd.concat([df_Articles, df_Author])
    df_Articles = df_Articles.reset_index(drop=True)


Article_xlsx(df_Articles)
Researchers_metrics(df_Articles,df)
Footer
Â© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
